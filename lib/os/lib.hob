import io;
import std;
import mem;
import list;
import process;
import strings;

use std.slice.Slice;
use strings.String;

fun setup() {
    std.panic.handler = fun (message) {
        io.out.putString("panic: ");
        io.out.putString(message);
        io.out.putString("\n");
        process.exit(1);
    };
}

fun clean(result: i32) -> i32 {
    if result != 0 {
        return result;
    }
    #`
    final leakedCount = mem.getAllocatedPtrsCount();
    if leakedCount != 0 {
        io.out.putString("POSTCHECK: leaked ");
        io.out.putByte('0' + leakedCount as u8); # TODO: toInt
        io.out.putString(" allocated pointers\n");
    }
    `#
    return 0;
}

public fun mainWithoutArgs(main: fun () -> i32) -> i32 {
    setup();
    return clean(main());
}

public fun main(argc: usize, argv: **u8, main: fun (Slice.<string>) -> i32) -> i32 {
    setup();
    var args = list.newWithCapacity.<string>(argc);
    defer args.free();
    for i in std.range(argc) {
        args.push(std.str.fromC(argv[i]));
    }
    return clean(main(args.data));
}
