import io;
import std;

type List<T> = struct {
    data: std.slice.Slice.<T>,
    capacity: usize
};

extern fun malloc(size: usize) -> *void;

fun new<T>(capacity: usize) -> List.<T> {
    return <(List.<T>)> {
        data: std.slice.new.<T>(malloc(T.sizeof * capacity) as *T, 0),
        capacity: capacity,
    };
}

fun push<T>(list: *List.<T>, value: T) {
    list.*.data.raw[list.*.data.length] = value;
    list.*.data.length += 1;
}

global fun main() -> i32 {
    var list = new.<u8>(4);
    io.out.putString(list.data as string);
    return 0;
}
