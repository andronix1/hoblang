import std;
import io;
import result;
import process;

use result.Result;

type ResultConstructor = fun (string) -> Result.<string, string>;

const ok: ResultConstructor = result.ok.<string, string>;
const err: ResultConstructor = result.err.<string, string>;

global fun main() -> i32 {
    std.panic.handler = fun (message: string) {
        io.out.putString("fatal error: ");
        io.out.putString(message);
        io.out.putString("\n");
        process.exit(1);
    };

    io.out.putString(ok("hello").unwrap());
    io.out.putString(err(", ").unwrapErr());
    io.out.putString(ok("noooooooo").map(fun (a: string) -> string {
        return "how";
    }).unwrap());
    io.out.putString(ok(" are").mapErr(fun (a: string) -> string {
        return "noooo";
    }).unwrap());
    io.out.putString(err("---").mapErr(fun (a: string) -> string {
        return " you?\n";
    }).unwrapErr());
    return 0;
}
