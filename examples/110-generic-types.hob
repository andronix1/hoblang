import io;

# You can use generics before its definition
type WrapperI32 = Wrapper.<i32>;

type Wrapper<T> = struct { inner: T };

type WrappedString = string;

fun extractInner(arg: Wrapper.<i32>) -> i32 {
    return arg.inner;
}

global fun main() -> i32 {
    # Unfortunately, `>>` token is reserved for shr operation. So, these types should be wrapped in circle braces
    io.out.putString(<(Wrapper.<WrappedString>)> {
        inner: "Hello using generics\n" as WrappedString
    }.inner);

    # Type alias of type generic can be downcasted to generic as other types
    # For example, there is example of downcasting WrapperI32 to Wrapper.<i32>
    return extractInner(<WrapperI32> { inner: 123 });
}
